type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            Ship[] ships = new Ship[5];
            String[] names = new String[]{"Aircraft Carrier", "Battleship", "Submarine", "Cruiser", "Destroyer"};
            int[] lengths = new int[]{5, 4, 3, 3, 2};
            Ship.printOcean(0);
            for (int i = 0; i < ships.length; i++) {
                System.out.print("Enter the coordinates of the " + names[i] + " (" + lengths[i] + " cells): ");
                String line = scanner.nextLine();
                String[] parts = line.split(" ");
                try {
                    ships[i] = new Ship(new Coordinate(parts[0].charAt(0), Integer.parseInt(parts[0].substring(1))), new Coordinate(parts[1].charAt(0), Integer.parseInt(parts[1].substring(1))), lengths[i], names[i], i + 1);
                    ships[i].printOcean(0);
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                    i--;
                }
            }
            Ship.unSunkShips = 5;
            System.out.println("The game starts!");
            Ship.printOcean(6);
            System.out.println("Take a shot!");
            while (Ship.unSunkShips != 0) {
                takeShot(scanner);
            }
        }

        public static void takeShot(Scanner scanner) {
            String guess = scanner.nextLine();
            try {
                boolean isHit = Ship.checkGuessHit(new Coordinate(guess.charAt(0), Integer.parseInt(guess.substring(1))));
                int count = Ship.getUnsunkShipCount();
                Ship.printOcean(6);
                if (count != Ship.unSunkShips) {
                    System.out.println(count != 0 ? "You sank a ship! Specify a new target:" : "You sank the last ship. You won. Congratulations!");
                    Ship.unSunkShips--;
                } else {
                    System.out.println(isHit ? "You hit a ship! Try again:" : "You missed. Try again:");
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
                takeShot(scanner);
            }
        }
    }

    class Ship {
        private final int length;
        private final Coordinate startCoordinate;
        private final Coordinate endCoordinate;
        private static int[][] ocean = new int[10][10];

        public static int unSunkShips = 0;

        Ship(Coordinate startCoordinate, Coordinate endCoordinate, int length, String name, int shipId) throws Exception {
            this.length = length;
            if (startCoordinate.getIndexX() != endCoordinate.getIndexX() && startCoordinate.getIndexY() != endCoordinate.getIndexY()) {
                throw new Exception("Error! Wrong ship location! Try again:");
            }
            if (length != Math.abs(endCoordinate.getIndexX() - startCoordinate.getIndexX()) + 1 && length != Math.abs(endCoordinate.getIndexY() - startCoordinate.getIndexY()) + 1) {
                throw new Exception("Error! Wrong length of the " + name + "! Try again:");
            }
            this.startCoordinate = startCoordinate;
            this.endCoordinate = endCoordinate;
            isOverlapping(shipId);
        }

        public static boolean checkGuessHit(Coordinate c) {
            if (ocean[c.getIndexY()][c.getIndexX()] >= 1) {
                ocean[c.getIndexY()][c.getIndexX()] = 7;
                return true;
            } else {
                ocean[c.getIndexY()][c.getIndexX()] = 8;
                return false;
            }
        }

        public static int getUnsunkShipCount() {
            ArrayList<Integer> ships = new ArrayList<Integer>(5);
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    if (ocean[i][j] > 0 && ocean[i][j] < 6 && !ships.contains(ocean[i][j])) {
                        ships.add(ocean[i][j]);
                    }
                }
            }
            return ships.size();
        }

        void isOverlapping(int shipId) throws Exception {
            for (int i = 0; i < length; i++) {
                if (startCoordinate.getIndexX() == endCoordinate.getIndexX()) {
                    if (0 != ocean[Math.min(startCoordinate.getIndexY(), endCoordinate.getIndexY()) + i][startCoordinate.getIndexX()]) {
                        throw new Exception("Error! You placed it too close to another one. Try again:");
                    }
                } else {
                    if (0 != ocean[startCoordinate.getIndexY()][Math.min(startCoordinate.getIndexX(), endCoordinate.getIndexX()) + i]) {
                        throw new Exception("Error! You placed it too close to another one. Try again:");
                    }
                }
            }
            if (startCoordinate.getIndexX() == endCoordinate.getIndexX()) {
                for (int i = 0; i < length; i++) {
                    for (int j = -1; j <= 1; j++) {
                        int temp = startCoordinate.getIndexX() + j;
                        if (j == 0) {
                            ocean[Math.min(startCoordinate.getIndexY(), endCoordinate.getIndexY()) + i][temp] = shipId;
                        } else if (temp >= 0 && temp < 10) {
                            ocean[Math.min(startCoordinate.getIndexY(), endCoordinate.getIndexY()) + i][temp] = -1;
                        }
                    }
                }
                try {
                    ocean[Math.min(startCoordinate.getIndexY(), endCoordinate.getIndexY()) - 1][startCoordinate.getIndexX()] = -1;
                } catch (ArrayIndexOutOfBoundsException e) {
                }
                try {
                    ocean[Math.max(startCoordinate.getIndexY(), endCoordinate.getIndexY()) + 1][startCoordinate.getIndexX()] = -1;
                } catch (ArrayIndexOutOfBoundsException e) {
                }
            } else {
                for (int i = 0; i < length; i++) {
                    for (int j = -1; j <= 1; j++) {
                        int temp = startCoordinate.getIndexY() + j;
                        if (j == 0) {
                            ocean[temp][Math.min(startCoordinate.getIndexX(), endCoordinate.getIndexX()) + i] = shipId;
                        } else if (temp >= 0 && temp < 10) {
                            ocean[temp][Math.min(startCoordinate.getIndexX(), endCoordinate.getIndexX()) + i] = -1;
                        }
                    }
                }
                try {
                    ocean[startCoordinate.getIndexY()][Math.min(startCoordinate.getIndexX(), endCoordinate.getIndexX()) - 1] = -1;
                } catch (ArrayIndexOutOfBoundsException e) {
                }
                try {
                    ocean[startCoordinate.getIndexY()][Math.max(startCoordinate.getIndexX(), endCoordinate.getIndexX()) + 1] = -1;
                } catch (ArrayIndexOutOfBoundsException e) {
                }
            }
        }

        public static void printOcean(int boundary) {
            System.out.println("  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < 10; i++) {
                System.out.print((char) (i + 'A') + " ");
                for (int j = 0; j < 10; j++) {
                    System.out.print(ocean[i][j] <= boundary ? "~ " : ocean[i][j] == 7 ? "X " : ocean[i][j] == 8 ? "M " : "O ");
                }
                System.out.println();
            }
        }
    }

    class Coordinate {
        private char y;
        private int x;

        Coordinate(char c, int i) throws Exception {
            if ('A' > c || 'J' < c || 1 > i || 10 < i) {
                throw new Exception("Error! You entered the wrong coordinates! Try again: ");
            }
            y = c;
            x = i;
        }

        public int getIndexY() {
            return y - 'A';
        }

        public int getIndexX() {
            return x - 1;
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 01 May 2022 02:31:13 UTC
record: -1
